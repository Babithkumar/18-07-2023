DAY-01: 09-10-2023

INTRO, ANALYSIS, ARCHITECTURE, SETUP & SOME BASIC COMMANDS

MONOLITHIC: SINGLE APP -- > SINGLE SERVER -- > SINGLE DB
MICRO SERVICES: SINGLE APP -- > MULTIPLE SERVERS -- > MULTIPLE DB

containerization: Process of packing application with its dependencies.
EX: PUBG 
BEFORE CONTAINARIZATION: [APP=PLAYSTORE MAPS=INTERNET]
AFTER CONTAINARIZATION: [APP(MAPS) = PLAYSTORE]

CAKE=BAKERY & KINFE=STORE
SWIGGY= CAKE & KNIFE 


LIMITATIONS:
1. DEPENDCY
2. SCALE
3. SLOW DEVELOPMENT
4. TESTING 


WHY MICRO SERVICES :
CLOSTLY -- > SOLUTION

SERVERS = CONTAINERS

CONTAINERS:
it is used to create, run and deploy application.
conatiainers are advance than servers.
these are light weighted components.

IMAGE:
it will have os which req to run our container.
os -- > pkgs -- > deploy

DOCKER:
its a tool used to create containers.
its a free and opensoure platfrom to create containers.
its platfrom independent.
docker runs on any os but natively supports linux distributions.
it is used to containerize the application.
language: GO LANG
Year: 2013
Who: Solomen Hykes and Sebastian Phal
befor docker user faced lot of issues, after docker users are not facing the issues.


DOCKER COMPONENTS:
DOCKER CLIENT: it interacts with us (command -- > execute -- > output)
DOCKER HOST: Where we install docker (Ec2, Laptop, Vm)
DOCKER DAEMON: manages all docker components (Conatiners, Images, Volume)
DOCKER REGISTRY: it manages all the docker images.

INSTALLATION:
yum install docker -y
systemctl start docker
systemctl status docker
docker version

COMMANDS:
docker images		: to show list of images
docker pull amazonlinux	: to get image amazonlinux from dockerhub
docker run -it --name cont1 amazonlinux : to create container

ls
yum install git maven tree httpd -y
check the version
touch file{1..10}

ctrl p q		: to exit from container
docker search ubuntu	: to search images
docker ps -a		: to list all containers
docker ps 		: to list runnings containers
docker stop cont1	: to stop the container
docker start cont1	: to start the container
docker attach cont1	: to go inside the container
docker inspect cont1	: to get the complete info container

HISTORY:
 1  yum install docker -y
    2  systemctl start docker
    3  systemctl status docker
    4  docker version
    5  docker images
    6  cd /
    7  du -sh
    8  docker pull amazonlinux2
    9  docker pull amazonlinux
   10  docker images
   11  docker run -it --name cont1 amazonlinux
   12  docker search redhat
   13  docker search ubuntu
   14  docker ps -a
   15  docker attach cont1
   16  docker ps -a
   17  docker stop cont1
   18  docker ps -a
   19  docker ps
   20  docker start cont1
   21  docker ps
   22  docker inspect cont1
   23  docker stats
   24  history
===========================================
DAY-02: 10-10-2023
DOCKER FILE

CONTAINARIZATION: OS-LEVEL OF VIRTUALIZATION

docker pull ubuntu
docker run -it --name cont1 ubuntu
ls
apt update -y
apt install maven git tree apache2 -y
touch file{1..10}
apt install vim -y
docker commit cont1 raham:v1
check the pkgs and file

Above method is worst method.
because its manual method.


DOCKER FILE:
it is used to automate image creation.
we write the Dockerfile we can reuse it.
inside Dockerfile we use components to do our works.
Components will be on Capital Letter.
in Dockerfile D will be capital.
to create image from file we need to build it.

FROM		: to get the os for conatiner.
RUN		: to execute linux commands(image creation)
CMD		: to execute linux commands(container creation)
ENTRYPOINT	: high priority than CMD
COPY		: it will copy local files to conatiner.
ADD		: it will copy internet files to conatiner.
WORKDIR		: to go specific foilder inside container
LABEL		: used to attach labels for image
ENV		: to pass env variables inside the container
ARGS		: to pass env variables outside the container
EXPOSE		: used to allocate port number


EX-1:

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
RUN touch file1

docker build -t raham:v2 .
docker run -it --name cont3 raham:v2


EX-2:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
RUN touch file1
RUN apt install default-jre -y
CMD ["java", "-version"]

docker build -t raham:v3 .
docker run -it --name cont4 raham:v3

EX-3:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp


docker build -t raham:v4 .
docker run -it --name cont5 raham:v4


EX-4:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
LABEL author Raham

docker build -t raham:v5 .
docker run -it --name cont6 raham:v5
docker inspect cont6

EX-5:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
LABEL author Raham
ENV client swiggy
ENV server prod

docker build -t raham:v6 .
docker run -it --name cont7 raham:v6

BASIC DEPLOY:

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

docker build -t devopsbyraham:v1 .
docker run -itd --name cont10 -p 81:80 devopsbyraham:v1


HISTORY:
1  yum install docker -y
    2  systemctl start docker.service
    3  systemctl status docker.service
    4  docker pull ubuntu
    5  docker images
    6  docker run -it --name cont1 ubuntu
    7  docker ps
    8  docker images
    9  docker commit cont1 raham:v1
   10  docker images
   11  docker run -it --name cont2 raham:v1
   12  vim Dockerfile
   13  cat Dockerfile
   14  ll
   15  docker build -t raham:v2 .
   16  docker images
   17  docker run -it --name cont3 raham:v2
   18  vim Dockerfile
   19  docker build -t raham:v3 .
   20  docker run -it --name cont4 raham:v3
   21  docker ps
   22  vim Dockerfile
   23  docker build -t raham:v4 .
   24  ll
   25  vim index.html
   26  docker build -t raham:v4 .
   27  docker run -it --name cont5 raham:v4
   28  vim index.html
   29  vim Dockerfile
   30  docker build -t raham:v5 .
   31  docker run -it --name cont6 raham:v5
   32  docker inspect cont6
   33  vim Dockerfile
   34  docker build -t raham:v6 .
   35  docker run -it --name cont7 raham:v6
   36  vim Dockerfile
   37  docker build -t raham:v7 .
   38  docker run -it --name cont8 raham:v7
   39  docker inspect cont8 | grep -i arg
   40  docker inspect cont8
   41  docker inspect cont8 | grep -i subject
   42  docker ps
   43  vim Dockerfile
   44  docker build -t raham:v7 .
   45  docker run -it --name cont9 raham:v7
   46  docker ps
   47  vim Dockerfile
   48  rm -rf *
   49  vim index.html
   50  vim Dockerfile
   51  docker build -t devopsbyraham:v1 .
   52  docker run -itd --name cont10 -p 81:80 devopsbyraham:v1
   53  docker run -itd --name cont11 -p 82:80 devopsbyraham:v1
   54  docker run -it --name cont12 ubuntu
   55  history
=========================================

DAY-03: 11-10-2023

VOLUME:
in conatiner if we want to store data we can use volumes.
volume is nothing but a folder in container.
volume can be shared to multiple containers.
At a time we can share single volume.
data inside volume will store on local.
volumes are loosely coupled to conatainer.

1. DOCKER FILE:

FROM ubuntu
VOLUME ["/volume1"]

docker build -t raham:v1 .
docker run -it --name cont1 raham:v1
cd volume1
touch file{1..10}
ctrl p q
docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
cd volume1
touch file{11..20}
ctrl p q
docker attach cont1
ll

===================================================================================

2. MOUNT VOLUME: 
volume we create locally the we add for conatier

docker volume ls
docker volume create volume2
docker volume inspect volume2
cd /var/lib/docker/volumes/volume2/_data
touch python{1..10}
docker run -it --name cont4 --mount source=volume3,destination=/abc ubuntu

========================================================================

3. CLI:
docker run -it --name cont5 -v /volume4 ubuntu
cd volume4
touch php{1..10}
docker run -it --name cont6 --volumes-from cont5 --privileged=true ubuntu


4. SHARING LOCAL FILES

cd 
touch raham{1..10}
docker volume inspect volume3
cp * /var/lib/docker/volumes/volume3/_data
docker attach cont4
cd volume3
ll

5. LOCAL FILES -- > VOLUME -- > CONTAINER

docker run -it --name cont10 -v /root:/volume5 ubuntu


DOCKER SYSTEM COMMANDS:
to know the docker components resource utilization
docker system df
docker system df -v

docker ps -a -q
docker kill $(docker ps -a -q)
docker rm $(docker ps -a -q)
